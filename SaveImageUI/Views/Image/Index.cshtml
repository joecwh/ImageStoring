@model IEnumerable<SaveImageUI.Models.Image>

@{
    ViewData["Title"] = "Image";
}

<style>
    .custom-image {
        width: 100%;
        height: 300px;
        object-fit: fill;
    }

    .xsymbol
    {
        position: absolute;
        right: 5px;
    }

    .bi
    {
        font-size: 24px;
        color:black; 
        opacity: 0.5;
    }

    .bi:hover
    {
        opacity: 1;
    }
</style>

<h1>Images</h1>

<div id="uploadResult" class="alert" style="display: none;"></div>

<p>
    <form asp-controller="Image" asp-action="Upload" method="post" enctype="multipart/form-data">
        <div class="form-group">
            <input type="file" class="form-control mb-3" id="files" name="files" multiple>
        </div>
        <div class="form-group mb-3">
            <ul id="file-list" class="list-group"></ul>
        </div>
        <button type="submit" class="btn btn-primary">Upload</button>
    </form>
</p>

<div class="container p-0">
    <div class="row g-3">

        @foreach (var img in Model)
        {
            <div class="col-sm-4">
                <div class="card">
                    <div class="card-body p-0">
                        <a href="@Url.Action("Delete", "Image", new { id = img.Id })" class="xsymbol"><i class="bi bi-x-circle-fill"></i></a>                        
                        <img src="@img.ImageFilePath" class="custom-image shadow" />
                    </div>
                </div>
            </div>
        }

    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelector("form").addEventListener("submit", async function (event) {
            event.preventDefault();

            const formData = new FormData(this);

            const response = await fetch(this.action, {
                method: "POST",
                body: formData
            });

            const result = await response.json();

            const uploadResult = document.getElementById("uploadResult");
            uploadResult.textContent = result.message;

            if (result.success) {
                uploadResult.classList.add("alert-success");
                uploadResult.classList.remove("alert-danger");

                setTimeout(() => {
                    location.reload();
                }, 3500);
            } else {
                uploadResult.classList.add("alert-danger");
                uploadResult.classList.remove("alert-success");
            }

            uploadResult.style.display = "block";

            // Hide the uploadResult element after 3 seconds
            setTimeout(() => {
                uploadResult.style.display = "none";
            }, 3000);
        });
    });

    document.getElementById('files').addEventListener('change', function (event) {
        var fileList = event.target.files;
        var fileListContainer = document.getElementById('file-list');
        fileListContainer.innerHTML = ''; // Clear previous list

        for (var i = 0; i < fileList.length; i++) {
            var listItem = document.createElement('li');
            listItem.classList.add('list-group-item');
            listItem.textContent = fileList[i].name;
            fileListContainer.appendChild(listItem);
        }
    });
</script>

